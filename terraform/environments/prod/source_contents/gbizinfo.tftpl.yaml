- init:
    assign:
      - bucket: ${bucket}
      - repository: ${repository}
      - url: ${url}
      - includedTargets: []
      - requests:
          - object: basic
            body: downenc=UTF-8&downfile=7&downtype=csv
          - object: certification
            body: downenc=UTF-8&downfile=8&downtype=csv
          - object: commendation
            body: downenc=UTF-8&downfile=9&downtype=csv
          - object: subsidy
            body: downenc=UTF-8&downfile=10&downtype=csv
          - object: procurement
            body: downenc=UTF-8&downfile=11&downtype=csv
          - object: patent
            body: downenc=UTF-8&downfile=12&downtype=csv
          - object: finance
            body: downenc=UTF-8&downfile=13&downtype=csv
          - object: workplace
            body: downenc=UTF-8&downfile=14&downtype=csv
- loadFile:
    try:
      steps:
        - parallelStep:
            parallel:
              for:
                value: r
                in: $${requests}
                steps:
                  - downloadFile:
                      call: http.post
                      args:
                        url: $${url}
                        timeout: 600
                        body:
                          method: POST
                          url: https://info.gbiz.go.jp/hojin/Download
                          body: $${r.body}
                          headers:
                            Content-Type: application/x-www-form-urlencoded
                          bucket: $${bucket}
                          object: $${r.object + ".csv"}
                        auth:
                          type: OIDC
        - createCompilationResult:
            call: http.post
            args:
              url: $${"https://dataform.googleapis.com/v1beta1/" + repository + "/compilationResults"}
              auth:
                type: OAuth2
              body:
                git_commitish: main
            result: compilationResult
        - makeIncludedTargets:
            for:
              value: r
              in: $${requests}
              steps:
                - addIncludedTargets:
                    assign:
                      - target:
                          database: $${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
                          schema: gbizinfo_staging
                          name: $${r.object + "_raw"}
                      - includedTargets: $${list.concat(includedTargets, target)}
        - createWorkflowInvocation:
            call: http.post
            args:
              url: $${"https://dataform.googleapis.com/v1beta1/" + repository + "/workflowInvocations"}
              auth:
                type: OAuth2
              body:
                compilationResult: $${compilationResult.body.name}
                invocationConfig:
                  includedTargets: $${includedTargets}
                  transitiveDependentsIncluded: true
            result: workflowInvocation
        - checkIfDone:
            switch:
              - condition: $${workflowInvocation.body.state == "SUCCEEDED"}
                return: $${workflowInvocation}
              - condition: $${workflowInvocation.body.state == "CANCELLED"}
                raise:
                  message: "Dataform run was canceled."
              - condition: $${workflowInvocation.body.state == "FAILED"}
                raise:
                  message: "Dataform run failed."
              - condition: $${not(workflowInvocation.body.state in ["RUNNING", "CANCELING"])}
                raise:
                  message: "Dataform run has an unexpected status."
        - wait:
            call: sys.sleep
            args:
              seconds: 60
        - checkWorkflowInvocation:
            call: http.get
            args:
              url: $${"https://dataform.googleapis.com/v1beta1/" + workflowInvocation.body.name}
              auth:
                type: OAuth2
            result: workflowInvocation
            next: checkIfDone
    except:
      as: e
      steps:
        - access_secret:
            call: googleapis.secretmanager.v1.projects.secrets.versions.access
            args:
              name: ${slack_webhook_url_secret_id}/versions/latest
            result: base64_encoded_secret
        - notify:
            call: http.post
            args:
              url: $${text.decode(base64.decode(base64_encoded_secret.payload.data))}
              body:
                text: $${e.message}
        - raise_error:
            raise: $${e}
